import TelegramBot from 'node-telegram-bot-api';
import gpt from './gpt.js';

// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const token = '6925994505:AAFoY85wy6LYSWyeBcif4erGrW1b1C1n0oY';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};
const previousMessages = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendStartMessage = (chatId) => {
  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üì∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞", callback_data: "check_composition" }
        ],
        [
          { text: "üí° –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é", callback_data: "get_nutrition_tips" }
        ]
      ]
    }
  };

  const caption = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!

üçã  –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –º—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è, –Ω–æ —Ä–µ–¥–∫–æ –∑–∞–¥—É–º—ã–≤–∞–µ–º—Å—è –æ —Ç–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–∞–≤–µ. –ö –±–æ–ª—å—à–æ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–∏—â–µ–≤—ã–µ –¥–æ–±–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–∫–∞–∑–∞—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–º. –ò —ç—Ç–∏—Ö –¥–æ–±–∞–≤–æ–∫ —Ç–∞–∫ –º–Ω–æ–≥–æ, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∑–∞–ø–æ–º–Ω–∏—Ç –∏—Ö –≤—Å–µ, –∞ –∏–∑—É—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö –≤ —Å–æ—Å—Ç–∞–≤–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–æ –º—ã —Å –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–∏–¥—É–º–∞–ª–∏ —Ä–µ—à–µ–Ω–∏–µ!

üì±–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—à—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É! 
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–∞–≤, –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –æ—Ç–ø—Ä–∞–≤—å —á—ë—Ç–∫—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (–ª–∏–±–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º), –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç —Ñ–æ—Ç–æ –≤ —Ç–µ–∫—Å—Ç –∏ –¥–∞—Å—Ç —Ç–µ–±–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º. –ù–µ—Ç –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –º–∞–≥–∞–∑–∏–Ω–µ.

üí°–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –ê –Ω–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–∞—Å—Ç —Ç–µ–±–µ —á—ë—Ç–∫–∏–µ —à–∞–≥–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
  bot.sendPhoto(chatId, './image.png', { caption: caption, reply_markup: options.reply_markup })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err);
    });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  sendStartMessage(msg.chat.id);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates[chatId] = data;

  if (data === 'check_composition') {
    const message = '–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö, –≤—ã–∑—ã–≤–∞—é—â–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–µ.';
    previousMessages[chatId] = message; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_previous" }]]
      }
    });
  } else if (data === 'get_nutrition_tips') {
    const options = {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–•–æ—á—É –º–µ–Ω—å—à–µ —É—Å—Ç–∞–≤–∞—Ç—å –∏ –Ω–µ –±–æ–ª–µ—Ç—å", callback_data: "less_tired" }],
          [{ text: "–•–æ—á—É –¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ", callback_data: "stay_fit" }],
          [{ text: "–•–æ—á—É –±—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º", callback_data: "be_more_productive" }],
          [{ text: "–ó–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å —Å–∞–º", callback_data: "ask_question" }],
          [{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_start" }]
        ]
      }
    };

    const message = `–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é üçè –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ üåü. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:`;
    previousMessages[chatId] = message; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(chatId, message, options);
  } else if (data === 'back_to_previous') {
    const previousMessage = previousMessages[chatId];
    if (previousMessage) {
      bot.sendMessage(chatId, previousMessage, {
        reply_markup: {
          inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_start" }]]
        }
      });
    }
  } else if (data === 'back_to_start') {
    sendStartMessage(chatId);
  } else if (data === 'less_tired') {
    const response = await gpt('', '–•–æ—á—É –º–µ–Ω—å—à–µ —É—Å—Ç–∞–≤–∞—Ç—å –∏ –Ω–µ –±–æ–ª–µ—Ç—å');
    bot.sendMessage(chatId, response.content, {
      reply_markup: {
        inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_previous" }]]
      }
    });
  } else if (data === 'stay_fit') {
    const response = await gpt('', '–•–æ—á—É –¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ');
    bot.sendMessage(chatId, response.content, {
      reply_markup: {
        inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_previous" }]]
      }
    });
  } else if (data === 'be_more_productive') {
    const response = await gpt('', '–•–æ—á—É –±—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º');
    bot.sendMessage(chatId, response.content, {
      reply_markup: {
        inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_previous" }]]
      }
    });
  } else if (data === 'ask_question') {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.', {
      reply_markup: {
        inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_start" }]]
      }
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userStates[chatId]) {
    const state = userStates[chatId];

    if (state === 'check_composition') {
      if (msg.text) {
        const response = await gpt('', msg.text);
        bot.sendMessage(chatId, response.content, {
          reply_markup: {
            inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_previous" }]]
          }
        });
      } else if (msg.photo) {
        const photo = msg.photo[msg.photo.length - 1];
        const fileId = photo.file_id;

        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${token}/${file.file_path}`;

        const response = await gpt(fileUrl);
        bot.sendMessage(chatId, response.content, {
          reply_markup: {
            inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_previous" }]]
          }
        });
      }
    } else if (state === 'get_nutrition_tips') {
      const response = await gpt('', msg.text);
      bot.sendMessage(chatId, response.content, {
        reply_markup: {
          inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data: "back_to_start" }]]
        }
      });
    }
  }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');